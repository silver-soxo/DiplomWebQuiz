@page "/student/quiz"

@layout QuizPageLayout

@inject NavigationManager NavigationManager
@inject QuizState QuizState
@inject IStudentQuizApi StudentQuizApi
@inject IAppState AppState

<SectionContent SectionName="pageTitle">Тест - @QuizState.Quiz?.Name <small>[@QuizState.Quiz?.TotalQuestions вопроса(ов)]</small></SectionContent>

@if (QuizState.Quiz != null)
{
	<div class="row mb-3">
		<div class="col-sm-12">
			<div class="my-1 d-flex justify-content-between align-items-center">
				<h6>@_questions.Count из @QuizState.Quiz.TotalQuestions вопросов</h6>
				<div>
					<QuizTimer TotalMinutes="QuizState.Quiz.TimeInMinutes" OnTimerStop="AutoSubmitQuizAsync"/>
				</div>
			</div>
			<h4 class="mt-3 mb-0">@_question.Text</h4>
			<hr />
			@foreach (var o in _question.Options)
			{
				<div class="d-flex gap-2 p-3 mb-3 bg-white option-box" @onclick="() => _selectedOptionId = o.Id">
					<input type="radio" class="" name="rdo_@_question.Id" id="rdo_@o.Id"
					checked="@(_selectedOptionId == o.Id)"
					@onchange="() => _selectedOptionId = o.Id" />
					<label for="rdo_@o.Id" class="d-block">@o.Text</label>
				</div>
			}
			@if (_errorMessage != null)
			{
				<div class="bg-danger my-3 p-2 d-flex justify-content-between align-items-center">
					<label class="text-white">@_errorMessage</label>
					<button type="button" class="btn btn-sm btn-light" @onclick="() => _errorMessage = null">X</button>
				</div>
			}
			<hr />
			<div class="d-flex justify-content-between align-items-center">
				<button type="button" class="btn btn-danger" @onclick="() => _showExitQuizCofirmation = true">Прервать тестирование</button>
				@if (!IsLastQuestion)
				{
					<button type="button" class="btn btn-primary" @onclick="SaveAndNextQuestionAsync">Следующий вопрос</button>
				}
				else
				{
					<button type="button" class="btn btn-primary" @onclick="SubmitQuizAsync">Сохраниить тетсирование</button>
				}
			</div>
		</div>
	</div>
}


@if (_submitQuizMessage != null)
{
	<Modal Title="Тест отправлен" OnActionButtonClick="RedirectToMyQuizes" OnCancelClick="RedirectToMyQuizes">
		<p class="text-success h5">@_submitQuizMessage</p>
	</Modal>
}

@if (_showExitQuizCofirmation)
{
	<Modal Title="Покинуть тестирование?" ActionButtonText="Да" OnActionButtonClick="ExitQuizAsync" 
	OnCancelClick="() => _showExitQuizCofirmation = false">
		<h5 class="text-danger">Вы действительно хотите покинуть тестирование</h5>
	</Modal>
}

@code {
	private QuestionDto _question = new();
	private int _selectedOptionId;
	private List<QuestionDto> _questions = [];
	private bool IsLastQuestion => _questions.Count == QuizState.Quiz.TotalQuestions;
	private string? _errorMessage;
	private string? _submitQuizMessage;
	private bool _showExitQuizCofirmation;

	protected override async Task OnInitializedAsync()
	{
		if (QuizState.Quiz == null || QuizState.StudentQuizId == 0)
		{
			NavigationManager.NavigateTo("student/home", replace: true);
			return;
		}
		await LoadNextQuestionAsync();

	}

	private async Task SaveAndNextQuestionAsync()
	{
		var isResponseSaved = await SaveQuestionResponseAsync();
		if (isResponseSaved)
			await LoadNextQuestionAsync();
	}

	private async Task SubmitQuizAsync()
	{
		var isResponseSaved = await SaveQuestionResponseAsync();
		if (isResponseSaved)
		{
			AppState.ShowLoader("Отправка тестирования");
			try
			{
				QuizApiResponse result = await StudentQuizApi.SubmitQuizAsync(QuizState.StudentQuizId);
				if (!result.IsSuccess)
				{
					_errorMessage = result.ErrorMessage;
					return;
				}
				// Показать результат в модальном окне или на реазделенной странице
				_submitQuizMessage = "Тестирование сохранено успешно";
			}
			catch (Exception ex)
			{
				_errorMessage = ex.Message;
			}
			finally
			{
				AppState.HideLoader();
			}
		}
	}

	private async Task ExitQuizAsync()
	{
		try
		{
			AppState.ShowLoader("Выход из теста");
			QuizApiResponse result = await StudentQuizApi.ExitQuizAsync(QuizState.StudentQuizId);
			if (!result.IsSuccess)
			{
				_errorMessage = result.ErrorMessage;
				return;
			}
			RedirectToMyQuizes();
		}
		catch(Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			AppState.HideLoader();
		}
	}

	private async Task<bool> SaveQuestionResponseAsync()
	{
		_errorMessage = null;
		if (_selectedOptionId == 0)
		{
			_errorMessage = "Пожалуйста выбирите вариант ответа";
			return false;
		}

		AppState.ShowLoader("Сохранение вашего ответа");
		try
		{
			StudentQuizQuestionResponseDto dto = new(QuizState.StudentQuizId, _question.Id, _selectedOptionId);
			QuizApiResponse result = await StudentQuizApi.SaveQuestionResponseAsync(QuizState.StudentQuizId, dto);
			if (!result.IsSuccess)
			{
				_errorMessage = result.ErrorMessage;
				return false;
			}
			_selectedOptionId = 0;
			return true;
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
			return false;
		}
		finally
		{
			AppState.HideLoader();
		}
	}

	private async Task LoadNextQuestionAsync()
	{
		AppState.ShowLoader("Получение вопроса");
		try
		{
			QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(QuizState.StudentQuizId);
			if (!result.IsSuccess || result.Data == null)
			{
				//вывести сообщение об ошибке
				_errorMessage = result.ErrorMessage;
				return;
			}
			_question = result.Data;
			_questions.Add(_question);
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			AppState.HideLoader();
		}
	}
	private void RedirectToMyQuizes()
	{
		QuizState.StopQuiz();
		NavigationManager.NavigateTo("student/my-quizes", replace: true);
	}

	private async Task AutoSubmitQuizAsync()
	{	
		try
		{
			AppState.ShowLoader("Автоматитческая отправка теста");
			QuizApiResponse result = await StudentQuizApi.AutoSubmitQuizAsync(QuizState.StudentQuizId);
			if (!result.IsSuccess)
			{
				_errorMessage = result.ErrorMessage;
				return;
			}
			// Показать результат в модальном окне или на реазделенной странице
			_submitQuizMessage = "Тестирование сохранено успешно";
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			AppState.HideLoader();
		}
	}
}
