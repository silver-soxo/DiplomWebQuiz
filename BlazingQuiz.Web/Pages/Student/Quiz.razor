@page "/student/quiz"

@inject NavigationManager NavigationManager
@inject QuizState QuizState
@inject IStudentQuizApi StudentQuizApi

<SectionContent SectionName="pageTitle">Тест - @QuizState.Quiz.Name <small>[@QuizState.Quiz.TotalQuestions вопроса(ов)]</small></SectionContent>

<div class = "row mb-3">
	@*<Timer />*@
	<div class="col-sm-12">
		<h4 class="mt-3 mb-0">@_question.Text</h4>
		<hr />

		@foreach (var o in _question.Options)
		{
			<div class="d-flex gap-2 p-3 mb-3 bg-white option-box shadow">
				<input type="radio" class="" name="rdo_@_question.Id" id="rdo_@o.Id"
				checked="@(_selectedOptionId == o.Id)"
				@onchange="() => _selectedOptionId = o.Id"/>
				<label for="rdo_@o.Id" class="d-block">@o.Text</label>
			</div>	
		}
		<hr />
		<div class="d-flex justify-content-between align-items-center">
			<button type="button" class="btn btn-danger" @onclick="ExitQuizAsync">Прервать тестирование</button>
			@if (!IsLastQuestion)
			{
				<button type="button" class="btn btn-primary" @onclick="SaveAndNextQuestionAsync">Следующий вопрос</button>
			}
			else
			{
				<button type="button" class="btn btn-primary" @onclick="SubmitQuizAsync">Сохраниить тетсирование</button>
			}

		</div>

	</div>
</div>

@code {
	private QuestionDto _question = new();
	private int _selectedOptionId;
	private List<QuestionDto> _questions = [];
	private bool IsLastQuestion => _questions.Count == (QuizState.Quiz.TotalQuestions - 1);

	protected override async Task OnInitializedAsync()
	{
		if (QuizState.Quiz == null || QuizState.StudentQuizId == 0)
		{
			NavigationManager.NavigateTo("student/home", replace: true);
			return;
		}

		QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(QuizState.StudentQuizId);

		if (!result.IsSuccess || result.Data == null)
		{
			//вывести сообщение об ошибке
			return;
		}
		_question = result.Data;
	}

	private async Task ExitQuizAsync()
	{
		
	}

	private async Task SaveAndNextQuestionAsync()
	{

	}

	private async Task SubmitQuizAsync()
	{

	}
}
