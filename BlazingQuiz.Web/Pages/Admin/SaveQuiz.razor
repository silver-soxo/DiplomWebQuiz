@page "/admin/add-quiz"
@page "/admin/edit-quiz/{quizId:guid?}"

@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IAppState AppState

<SectionContent SectionName="pageTitle">@(IsEditCase ? "Редактирование теста" : "Создание теста")</SectionContent>

<EditForm Model="_quiz" OnValidSubmit="SaveQuizAsync">
	<DataAnnotationsValidator />
	<div class="row">

		<!-- Поле выбора категории" -->

		<div class="col-sm-3">
			<div class="mb-3">
				<label class="form-label">Категория</label>
				<InputSelect @bind-Value="_quiz.CategoryId" class="form-control">
					<option value="0">Выбрать категорию</option>
					@foreach (var c in _categories)
					{
						<option value="@c.Id">@c.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="() => _quiz.CategoryId" />
			</div>
		</div>

		<!-- Поле ввода названия" -->

		<div class="col-sm-3">
			<div class="mb-3">
				<label class="form-label">Название</label>
				<InputText @bind-Value="_quiz.Name" class="form-control"/>
				<ValidationMessage For="() => _quiz.Name" />
			</div>
		</div>

		<!-- Поле ввода количества вопросов" -->

		<div class="col-sm-3">
			<div class="mb-3">
				<label class="form-label">Количество вопросов</label>
				<InputNumber @bind-Value="_quiz.TotalQuestions" class="form-control"/>
				<ValidationMessage For="() => _quiz.TotalQuestions" />
			</div>
		</div>

		<!-- Поле ввода времени на тест" -->

		<div class="col-sm-3">
			<div class="mb-3">
				<label class="form-label">Время (в минутах)</label>
				<InputNumber @bind-Value="_quiz.TimeInMinutes" class="form-control"/>
				<ValidationMessage For="() => _quiz.TimeInMinutes" />
			</div>
		</div>

		<hr class="my-2"/>
		<h5 class="fw-bold">Вопросы</h5>

		<ol class="mb-0">
			@foreach (var q in _quiz.Questions)
			{
				var random = Guid.NewGuid();

				<li class="shadow p-3 mp-3">

					<!-- Поле ввода вопроса -->

					<textarea @bind="q.Text" class="form-control" rows="3"></textarea>

					<h6 class="my-2 fw-bold">Варинты ответа</h6>

					<ol>
						@foreach (var o in q.Options)
						{
							<li class="p-2 mb-2">
								<div class="input-group">

									<!-- Радиобатн правильного ответа -->

									<div class="input-group-text">
										<input class="form-check-input mt-0" type="radio" name="option_radio_@random" checked="@o.IsCorrect" @onchange="() => SetOptionAsCorrectAnswer(q, o)">
									</div>

									<!-- Поле ввода ответа -->

									<input type="text" @bind="o.Text" class="form-control">

									<!-- Кнопка удаления варианта ответа -->

									<button class="btn btn-danger" type="button" @onclick="() => q.Options.Remove(o)">X</button>
								</div>
							</li>
						}
					</ol>
					<!-- Кнопка "Добавить варианта ответа" -->
					<div class="d-flex justify-content-end"> 
						<button type="button" class="btn btn-sm btn-info" @onclick="() => q.Options.Add(new())">Добавить варинат ответа</button>
					</div>
				</li>
			}
		</ol>

		<!-- Кнопка добавления вопроса -->

		<div class="mt-0 mb-3 d-flex justify-content-center">
			<button type="button" class="btn btn-info" @onclick="() => _quiz.Questions.Add(GetDefaultEmptyQuestion())">+ Добавить вопрос</button>
		</div>

		<hr />

		<div class="row mb-5 alogn-items-center">
			<div class="col-sm-3 ms-auto d-flex justify-content-end">

				<!-- Преключатель активности теста -->

				<div class="form-check form-switch">
					<InputCheckbox @bind-Value="_quiz.IsActive" class="form-check-input" type="checkbox" role="switch" id="quizIsActive" />
					<label class="form-check-label" for="quizIsActive">Тест активен?</label>
				</div>
			</div>
			<div class="col-sm-5 d-grid me-auto">

				<!-- Кнопка сохранения теста -->

				<button type="submit" class="btn btn-success">Сохранить тест</button>
			</div>
		</div>
		@* <div class="d-flex mb-5 justify-content-center align-items-center gap-3"> *@
		@* </div>	 *@
	</div>
</EditForm>



@code {
	[Parameter]
	public Guid? QuizId { get; set; }

	private bool IsEditCase => QuizId.HasValue && QuizId.Value != Guid.Empty;

	private QuizSaveDto _quiz = new();

	private CategoryDto[] _categories = [];
	protected override async Task OnInitializedAsync()
	{
		if (IsEditCase)
		{
			// Получение списка тестов из API
			AppState.ShowLoader("Загрузка тестирований");
			var quiz = await QuizApi.GetQuizToEditAsync(QuizId!.Value);
			AppState.HideLoader();
			if (quiz == null)
			{
				NavigationManager.NavigateTo("/admin/manage-quizes");
				return;
			}
			_quiz = quiz;
		}
		else
		{
			var question = GetDefaultEmptyQuestion();
			_quiz.Questions = [question];
		}
		AppState.ShowLoader("Загрузка категорий");
		_categories = await CategoryApi.GetCategoriesAsync();
		AppState.HideLoader();
	}

	protected override void OnParametersSet()
	{
		if (!QuizId.HasValue && _quiz.Id != Guid.Empty)
		{
			// Мы работаем в режиме Редактирования и нажимаем на кнопку в левом 
			// меню навигации Добавить новое тестирование
			_quiz = new();
			_quiz.Questions = [GetDefaultEmptyQuestion()];
		}
	}

	<!-- Метод добавления нового вопроса -->

	private QuestionDto GetDefaultEmptyQuestion() => new QuestionDto
		{
			Options = [new(), new()]
		};		

	<!-- Метод проверки правильного варианта ответа -->

	private void SetOptionAsCorrectAnswer(QuestionDto q, OptionDto o)
	{
		foreach (var option in q.Options)
		{
			option.IsCorrect = false;
		}
		o.IsCorrect = true;
	}

	private async Task SaveQuizAsync()
	{
		var errorMessege = _quiz.Validate();
		if (!string.IsNullOrEmpty(errorMessege))
		{
			await ShowAlertAsync(errorMessege);
			return;
		}
		AppState.ShowLoader("Сохранение тестирования");
		var response = await QuizApi.SaveQuizAsync(_quiz);
		AppState.HideLoader();
		if (!response.IsSuccess)
		{
			await ShowAlertAsync(response.ErrorMessage);
			return;
		}

		NavigationManager.NavigateTo("/admin/manage-quizes");
	}

	private async Task ShowAlertAsync(string message, string title = "Ошибка") =>
		await JsRuntime.InvokeVoidAsync("alert", $"{title}\n{message}");
}
