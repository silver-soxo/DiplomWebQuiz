@page "/auth/register"
@using BlazingQuiz.Web.Auth

@layout EmptyLayout

@inject NavigationManager NavigationManager

@inject IAuthApi AuthApi
@inject QuizAuthStateProvider QuizAuthStateProvider
@inject IAppState AppState

<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto border shadow-lg">

            <div class="mt-3">
                <h1 class="h3 fw-bold">Регистрация</h1>
            </div>

            <hr />
            <EditForm Model="_model" OnValidSubmit="RegisterAsync">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">Имя: </label>
                    <InputText @bind-Value="_model.Name" class="form-control" />
                    <ValidationMessage For="() => _model.Name" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Почта: </label>
                    <InputText @bind-Value="_model.Email" class="form-control" />
                    <ValidationMessage For="() => _model.Email" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Телефон: </label>
                    <InputText @bind-Value="_model.Phone" class="form-control" />
                    <ValidationMessage For="() => _model.Phone" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Пароль: </label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" />
                    <ValidationMessage For="() => _model.Password" />
                </div>

                @if (_error != null)
                {
                    <div class="mb-3 bg-danger text-white p-2">
                        <p>@_error</p>
                    </div>
                }

                <div class="mb-3 d-flex justify-content-between">
                    @if (!_isBusy)
                    {
                        <a href="auth/login" class="btn btn-primary">Авторизация</a>
                        <button type="submit" class="btn btn-success">Зарегистрироваться</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Регистрация...</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>
@if(_showSuccessAlert)
{
    <Modal Title="Успешно" OnActionButtonClick="OnModalClose" OnCancelClick="OnModalClose">
        <p class="h5 text-success">Ваш аккаунт был успешно зарегистрирован. <br />
            Дождитесь одобрения администратора.</p>
    </Modal>
}
@code {
    private RegisterDto _model = new();
    private bool _isBusy;
    private string? _error;
    private bool _showSuccessAlert;

    protected override void OnInitialized()
    {
        if (QuizAuthStateProvider.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/", replace: true);
            return;
        }

    }

    private async Task RegisterAsync()
    {
        _error = null;
        _isBusy = true;

        try
        {
            AppState.ShowLoader("Регистрация");
            var apiResponse = await AuthApi.RegisterAsync(_model);
            if (!apiResponse.IsSuccess)
            {
                _error = apiResponse.ErrorMessage;
                return;
            }
            _showSuccessAlert = true;

        }
        catch (Exception ex)
        {

            _error = ex.Message;
        }
        finally
        {
            _isBusy = false;
            AppState.HideLoader();
        }
    }
    private void OnModalClose()
    {
        _model = new();
        NavigationManager.NavigateTo("auth/login");
    }
}