@page "/auth/login"
@using BlazingQuiz.Web.Auth

@layout EmptyLayout

@inject NavigationManager NavigationManager

@inject IAuthApi AuthApi
@inject QuizAuthStateProvider QuizAuthStateProvider

<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto border shadow-lg">

            <div class="mt-3">
                <h1 class="h3 fw-bold">Авторизация</h1>
            </div>

            <hr />
            <EditForm Model="_model" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">Логин: </label>
                    <InputText @bind-Value="_model.Username" class="form-control" />
                    <ValidationMessage For="() => _model.Username" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Пароль: </label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" />
                    <ValidationMessage For="() => _model.Password" />
                </div>

                @if (_error != null)
                {
                    <div class="mb-3 bg-danger text-white p-2">
                        <p>@_error</p>
                    </div>
                }

                <div class="mb-3 d-flex justify-content-between">
                    @if (!_isBusy)
                    {
                        <a href="auth/register" class="btn btn-primary">Регистрация</a>
                        <button type="submit" class="btn btn-success">Авторизоваться</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Вход...</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code{
    private LoginDto _model = new();
    private bool _isBusy;
    private string? _error;

    protected override void OnInitialized()
    {
        if (QuizAuthStateProvider.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/", replace: true);
            return;
        }
        
    }

    private async Task LoginAsync()
    {
        _error = null;
        _isBusy = true;

        try
        {
            var authResponse = await AuthApi.LoginAsync(_model);
            if (authResponse.HasError)
            {
                _error = authResponse.ErrorMessage;
                return;
            }
            // set the token in some storage
            // Implement Auth State Provider
            var loggedInUser = authResponse.User;
            // Уставновка состояния входа в систему
            await QuizAuthStateProvider.SetLoginAsync(loggedInUser);

            NavigationManager.NavigateTo("/");

        }
        catch (Exception ex)
        {

            _error = ex.Message;
        }
        finally
        {
            _isBusy = false;
        }
    }
}